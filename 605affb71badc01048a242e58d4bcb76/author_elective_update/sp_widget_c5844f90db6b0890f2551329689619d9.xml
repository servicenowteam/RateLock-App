<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="DELETE">
        <category>custom</category>
        <client_script><![CDATA[function spTicketConversation($scope, nowAttachmentHandler, ratelockSession, $animate, $rootScope, cabrillo, $timeout, snRecordWatcher, spUtil, spAriaUtil, $http, $window, snAttachmentHandler, i18n) {
	$scope.showLocationIcon = false;
	$scope.msg = "";
	$scope.isNative = cabrillo.isNative();
	$scope.errorMessages = [];
	var existingEntries = {};
	var c = this;
	var skipNextRecordWatchUpdate = false;
	$scope.typing = [];
	if (!$scope.data.hasReadableJournalField && !$scope.data.isNewRecord)
		console.warn("No readable journal field (comments, work notes, etc.) available in the stream for this record");
	if ($scope.page && $scope.page.g_form)
		hideParentJournalFields();
	
	$rootScope.$on('template.text.added', function(event, text) {
		$scope.data.journalEntry = text.trim();
	});
	
	$scope.isShowingTemplates = true;
	$scope.templateButtonTitle = "Hide Templates Bar";
	$scope.showTemplatesBar = function() {
		$scope.isShowingTemplates = !$scope.isShowingTemplates;
		if ($scope.isShowingTemplates) {
			$scope.templateButtonTitle = "Hide Templates Bar";
		} else {
			$scope.templateButtonTitle = "Show Templates Bar";
		}
		$rootScope.$broadcast('ratelock.templates.isShowing', $scope.isShowingTemplates);
	}

	function hideParentJournalFields() {
		if (!$scope.data.stream)
			return;

		var fields = $scope.data.stream.journal_fields;
		var g_form = $scope.page.g_form;
		for (var f in fields)
			g_form.setDisplay(fields[f].name, false);
	}
	var liveProfiles = {};
	liveProfiles[$scope.user.sys_id] = {
		userID: $scope.user.sys_id,
		name: $scope.user.name,
		initials: $window.NOW.user_initials
	};
	if ($window.NOW.user_avatar) {
		liveProfiles[$scope.user.sys_id].userImage = $window.NOW.user_avatar;
	}

	$scope.getLiveProfileByUserId = function (userId){
		return liveProfiles[userId];
	}

	var pending = {};

	//Little caching implementation to make sure we only get a given user's profile once.
	$scope.hasLiveProfile = function hasLiveProfile(userId){
		if (!userId)
			return false;

		if (liveProfiles[userId])
			return true;
		
		if (pending[userId])
			return false;
		
		pending[userId] = $http.get('/api/now/live/profiles/sys_user.' + userId).then(function (response) {
			liveProfiles[userId] = {
				userID: userId,
				name: response.data.result.name,
				initials: buildInitials(response.data.result.name),
				avatar: response.data.result.avatar
			};
		});
		return false;
	}

	function buildInitials(name) {
		if (!name)
			return "--";

		var initials = name.split(" ").map(function(word) {
			return word.toUpperCase();
		}).filter(function(word) {
			return word.match(/^[A-Z]/);
		}).map(function(word) {
			return word.substring(0,1);
		}).join("");

		return (initials.length > 3) ? initials.substr(0, 3) : initials;
	}


	function setupAttachmentHandler(){
		$scope.attachmentHandler = new nowAttachmentHandler(attachSuccess, appendError);

		function attachSuccess() {
			$rootScope.$broadcast("sp.attachments.update", $scope.data.sys_id);
			spAriaUtil.sendLiveMessage($scope.data.attachAddedMsg);
		}

		function appendError(error) {
			spUtil.addErrorMessage(error.msg + error.fileName);
			$scope.errorMessages.push(error);
			spAriaUtil.sendLiveMessage($scope.data.attachFailMsg);
		}

		$timeout(function() {
			$scope.attachmentHandler.setParams($scope.data.table, $scope.data.sys_id, 1024 * 1024 * $scope.data.maxAttachmentSize);
		})
	}
	setupAttachmentHandler();

	var recordWatcherTimer;
	$scope.$on('record.updated', function(name, data) {
		// Use record watcher update if:
		//	This record was updated AND This widget didn't trigger the update.
		if (data.table_name == $scope.data.table && data.sys_id == $scope.data.sys_id){
			$timeout.cancel(recordWatcherTimer);
			recordWatcherTimer = $timeout(function(){
				if (skipNextRecordWatchUpdate)
					skipNextRecordWatchUpdate = false;
				else
					spUtil.update($scope).then(function(r){
						$scope.data.stream = r.stream;
					});
			}, 250);
		}
	});

	$scope.$on('sp.show_location_icon', function(evt) {
		$scope.data.showLocationIcon = true;
	});
	
	$scope.$on('attachment.updated', function(evt,options) {
		if ($scope.data.sys_id != -1 && options.sys_id == $scope.data.sys_id)
			updateAttachmentState($scope.data.table, $scope.data.sys_id);
	});
	

	function updateAttachmentState(table, sys_id) {
			c.server.update().then(function (data) {
					if (!data.stream || !data.stream.entries)
						return;
					var newEntries = data.stream.entries;
					var currEntries = $scope.data.mergedEntries;
					var oldSize = currEntries ? currEntries.length : 0;
					var newSize = newEntries.length;
					for (var i = 0; i < oldSize; i++) {
							if (!currEntries[i].attachment)
									continue;
							for (var j = 0; j < newSize; j++) {
									if (currEntries[i].sys_id == newEntries[j].sys_id && newEntries[j].attachment) {
											currEntries[i].attachment.state = newEntries[j].attachment.state;
											break;
									}
							}
					}
			});
	}
	
	$scope.scanAttachment = function(attachment){
		snAttachmentHandler.scanAttachment(attachment);
	}
	
	$rootScope.$on('sp.sessions', function(evt, sessions) {
		$scope.typing = [];
		Object.keys(sessions).forEach(function (session) {
			var journalFields = $scope.data.stream.journal_fields;
			var canUserReadJournalField = false;
			session = sessions[session];
			
			for (var j = 0; j < journalFields.length; j++) {
				if (journalFields[j].name === session.field_type) {
					canUserReadJournalField = journalFields[j].can_read;
					break;
				}									
			}
			
			if (session.status === 'typing' && canUserReadJournalField) {
				$scope.typing.push(session);
			}
				
			else
				return;
	
		})
	})

	$scope.$on('sp.conversation_title.changed', function(evt, text) {
		$scope.data.ticketTitle = text;
	})

	$scope.$watch("data.canWrite", function() {
		$rootScope.$broadcast("sp.record.can_write", $scope.data.canWrite);
	});

	var streamUpdateTimer;
	$scope.$watch("data.stream", function() {
		$timeout.cancel(streamUpdateTimer);
		streamUpdateTimer = $timeout(function() {
			mergeStreamEntries();
		}, 50);
	});

	function mergeStreamEntries() {
		$scope.placeholder = $scope.data.placeholderNoEntries;
		if (!$scope.data.stream || !$scope.data.stream.entries)
			return;

		$scope.placeholder = $scope.data.placeholder;
		var entries = $scope.data.stream.entries;
		if (!$scope.data.mergedEntries) {
			$scope.data.mergedEntries = $scope.data.stream.entries.slice();
			for (var i = 0; i < entries.length; i++) {
				existingEntries[entries[i].sys_id] = true;
			}

			return;
		}

		var mergedEntries = $scope.data.mergedEntries;
		for (var i = entries.length-1; i >= 0; i--) {
			var curEntry = entries[i];
			if (isNewEntry(mergedEntries, curEntry)){
				mergedEntries.unshift(curEntry);
				existingEntries[curEntry.sys_id] = true;
			}
		}
	}

	function isNewEntry(mergedEntries, item) {
		for (var i=0; i < mergedEntries.length; i++) {
			if (mergedEntries[i].sys_id === item.sys_id) {
				return false;
			}
		}
		return true;
	}

	$scope.getPlaceholder = function(isUseLabel) {
		if ($scope.data.use_dynamic_placeholder && $scope.data.useSecondaryJournalField)
			return $scope.data.secondaryJournalField.label;
		if (isUseLabel && $scope.data.use_dynamic_placeholder && !$scope.data.useSecondaryJournalField)
			return $scope.data.primaryJournalField.label;
		return $scope.placeholder;
	};

	var colorCache;
	$scope.getFieldColor = function(fieldName) {
		var defaultColor = "transparent";
		if (colorCache) {
			if (fieldName in colorCache)
				return colorCache[fieldName];
			else
				return defaultColor;
		}

		colorCache = {};
		var jf = $scope.data.stream.journal_fields;
		for (var i=0; i<jf.length;i++) {
			colorCache[jf[i].name] = jf[i].color || defaultColor;
		}
		return $scope.getFieldColor(fieldName);
	}

	$scope.checkInLocation = function() {
		$rootScope.$broadcast("check_in_location");
		$rootScope.$broadcast("location.sharing.start");
	}

	$scope.$on("location.sharing.end", function() {
		$timeout(function() {$scope.msg = ""}, 500);
	})

	$scope.$on("location.sharing.start", function() {
		$scope.msg = $scope.data.sharingLocMsg;
	})

	$scope.scanBarcode = function() {
		$rootScope.$broadcast("scan_barcode");
	}

	$scope.$on("attachment.upload.start", function() {
		$scope.data.isPosting = true;
		$scope.msg = $scope.data.uploadingAttachmentMsg;
	})

	$scope.$on("attachment.upload.stop", function() {
		$scope.data.isPosting = false;
		$scope.msg = "";
		//update the stream so we get the new attachment
		spUtil.update($scope).then(function(r) {
			$scope.data.stream = r.stream;
		});
	});

	$scope.data.isPosting = false;

	$scope.postEntry = function(input) {
		post(input);
	};

	function post(input) {
		if ($scope.data.isPosting)
			return;

		if (!input)
			return;

		input = input.trim();
		$scope.data.journalEntry = input;

		if ($scope.data.useSecondaryJournalField)
			$scope.data.journalEntryField = $scope.data.secondaryJournalField.name;
		else
			$scope.data.journalEntryField = $scope.data.primaryJournalField.name;
		$scope.data.isPosting = true;
		spUtil.update($scope).then(function(){
			$scope.data.isPosting = false;
			reset();
			spAriaUtil.sendLiveMessage($scope.data.messagePostedMsg);
			$timeout(function() {
				$scope.setFocus(); // sets focus back on input, defined in "link"
			});
		});
		skipNextRecordWatchUpdate = true;
		$scope.setFocus(); // sets focus back on input, defined in "link"
	}

	var reset = function(){
		$scope.userTyping("");
		$scope.data.journalEntry = "";
		$scope.updateFormWithJournalFields();
		$scope.data.useSecondaryJournalField = false;
		$scope.data.journalEntryField = "";
	}

	$scope.keyPress = function(event) {
		if ($scope.data.isPosting) {
			event.preventDefault();
			return;
		}
	}

	$scope.userTyping = function(input) {
		var status = "viewing";
		if (input.length)
			status = "typing";
		ratelockSession.publish($scope.data.table, $scope.data.sys_id, {
			session_id: $window.NOW.session_id,
			sys_id: $scope.data.sys_id,
			user_avatar: $window.NOW.user_avatar,
			user_initials: $window.NOW.user_initials,
			user_display_name: $window.NOW.user_display_name,
			user_name: $window.NOW.user_name,
			status: status
		});
		
		$scope.$emit("record.typing", {status: status, value: input, table: $scope.data.table, sys_id: $scope.data.sys_id});
		$scope.updateFormWithJournalFields();
	}
	$scope.updateFormWithJournalFields = function () {
		var fieldName, fieldToClear = "";
		if ($scope.data.useSecondaryJournalField) {
			fieldName = $scope.data.secondaryJournalField.name;
			fieldToClear = $scope.data.primaryJournalField.name;
		} else {
			fieldName = $scope.data.primaryJournalField.name;
			fieldToClear = "";
		}
		$scope.$emit("activity_stream_is_changed", {"fieldName": fieldName, "fieldToClear": fieldToClear, "input": $scope.data.journalEntry});
	}
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-title {
  display: inline;
}

.panel-body {
  background-color: #fff;
}

.btn.btn-link.active {
	color: $brand-primary;
}

.panel {
  background-color: transparent !important;
}

.btn-primary:focus {
	border: 1px solid $brand-primary;
  box-shadow: 0px 0px 5px $brand-primary;
}

.form-control:focus {
		border-color: $brand-primary;
    outline: 4px solid transparent;
    outline: 5px auto transparent;
    -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px rgba(224, 58, 58, 0.6);
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px rgba(224, 58, 58, 0.6);
}

.secondary-journal-field {
	border: 1px solid gold;
}

.primary-journal-field {
	border: 1px solid #ccc;
}

.panel-title-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.panel-title-icons {

  ul {
    display: flex;
    align-items: center;
    padding: 0;
    margin: 0;
  }
  li {
    padding: 0;
    margin: 0;

    .panel-button {
      display: flex;
      align-items: center;
      margin: 0 0 0 15px;
      line-height: initial;
			
      &amp;:hover, &amp;:focus {
        border-color: transparent;
    		outline: none;
    		-webkit-box-shadow: inset 0 0px 0px rgba(0, 0, 0, .075), 0 0 0px rgba(224, 58, 58, 0.6);
    		box-shadow: inset 0  0px 0px rgba(0, 0, 0, .075), 0 0 0px rgba(224, 58, 58, 0.6);
        text-decoration: none;
      }
      &amp;:not(.active):focus {
      	color: #000;
      }
      &amp;:not(.btn-templates):hover {
      	color: $brand-primary;
      }
    }
  }
}


.timeline-heading test {
  float:right;
}

.timeline-body &gt; p {
  white-space: pre-wrap;
  overflow-x: hidden;
}

.timeline-body ul &gt; li {
  float: none;
}

.no-resize {
  resize: none;
}

.journal-field-indicator {
  width: 5px;
  position: absolute;
  left: 5px;
  top: 5px;
  bottom: 5px;
  z-index: 3;
}

.panel-heading {
  word-wrap: break-word;
}

.avatar-container {
  cursor: default;
}

ul {
  list-style: none;
}

.overflow-hidden {
  overflow: hidden;
}


.timeline-badge-wrap {
  margin: auto;
  max-width: 115px;
}

.timeline-badge.success {
  background-color: $success;
}

.timeline-badge {
  position: relative;
  left:25%;
  width:50%;
  padding-bottom:50%;
  border-radius:50%;
}

.timeline-badge span{
  position:absolute;
  top:50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size:13px;
  color: #fff;
}

.journal-type {
 	display: inline-flex;
  display: -ms-inline-flexbox;
  flex-wrap: wrap;
  -webkit-justify-content: flex-end;
}

.fa-circle {
  font-size: 4px;
  padding: 7px;
}

@media (max-width: 768px) {
  .timeline-badge-wrap {
    margin: 0;
  }
  .timeline-badge {
    left: 10%;
  }
}
</css>
        <data_table>sp_instance</data_table>
        <demo_data>{"options": {&#13;
	"sys_id": -1,&#13;
		"table": "incident"&#13;
	}&#13;
}</demo_data>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function ratelockTicketLink(scope, elm) {
  // Set the focus back on the input for IE11
  scope.setFocus = function () {
    var input = $(elm[0]).find('textarea#post-input');
    if (input[0]) {
      input[0].focus();
    }
  }
}]]></link>
        <name>Ratelock Ticket Conversations</name>
        <option_schema>[{"hint":"Placeholder text shows selected journal field","name":"use_dynamic_placeholder","section":"Behavior","label":"Use dynamic placeholder","type":"boolean"},{"hint":"Message to show when record has no readable journal field","name":"no_readable_journal_field_message","default_value":"","section":"Presentation","label":"No readable journal field message","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function(data, input) {
	data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
	if (isNaN(data.maxAttachmentSize))
		data.maxAttachmentSize = 24;
	data.uploadingAttachmentMsg = gs.getMessage("Uploading attachment...");
	data.sharingLocMsg = gs.getMessage("Sharing location...");
	data.scanBarcodeMsg = gs.getMessage("Scan barcode");
	data.checkInLocMsg = gs.getMessage("Check in location");
	data.messagePostedMsg = gs.getMessage("Message has been sent");
	data.viewMsg = gs.getMessage("View");
	data.attachAddedMsg = gs.getMessage("Attachment added");
	data.attachFailMsg = gs.getMessage("Failed to add attachment");
	data.scanFailedMsg = gs.getMessage("File failed security scan");
	data.sys_id = (input ? input.sys_id : undefined) || options.sys_id || $sp.getParameter("sys_id");
	data.table = (input ? input.table : undefined) || options.table || $sp.getParameter("table");
	// don't use options.title unless sys_id and table also come from options
	if (options && options.sys_id && options.table)
		data.ticketTitle = options.title;
	data.placeholder = options.placeholder || gs.getMessage("Type your message here...");
	data.placeholderNoEntries = options.placeholderNoEntries || gs.getMessage("Type your message here...");
	data.btnLabel = options.btnLabel || gs.getMessage("Send");
	data.includeExtended = options.includeExtended || false;
	data.use_dynamic_placeholder = options.use_dynamic_placeholder;
	data.hideAttachmentBtn = options.hideAttachmentBtn;

	var gr = new GlideRecord(data.table);
	data.isNewRecord = data.sys_id == -1 || gr.isNewRecord();
	if (!gr.isValid())
		return;

	gr.addQuery('sys_id', data.sys_id);
	gr.query();
	while(gr.next()) {
		if (!gr.canRead())
			return;

		data.table = gr.getRecordClassName(); // use actual table for the record
		options.no_readable_journal_field_message = options.no_readable_journal_field_message || gs.getMessage("No readable comment field");
		data.number = gr.getDisplayValue('number');
		data.created_on = gr.getValue('sys_created_on');

		if (input) { // if we have input then we're saving
			if (input.journalEntry && input.journalEntryField){
				if (gr.canWrite(input.journalEntryField)){
					gr[input.journalEntryField] = input.journalEntry;
					gr.update();
					$sp.logStat('Comments', data.table, data.sys_id, input.journalEntry);
				}
				data.canWriteToEntryField = gr.canWrite(input.journalEntryField);
			}
			data.ticketTitle = input.ticketTitle;
			data.placeholder = input.placeholder;
			data.btnLabel = input.btnLabel;
			data.includeExtended = input.includeExtended;
		} else {
			if (!data.ticketTitle) {
				if (gr.short_description.canRead())
					data.ticketTitle = gr.getDisplayValue("short_description");
				if (!data.ticketTitle)
					data.ticketTitle = data.number;
			}

			$sp.logStat('Task View', data.table, data.sys_id);
		}

		data.canWrite = gr.canWrite();
		data.canAttach = gs.hasRole(gs.getProperty("glide.attachment.role"));
		data.canRead = gr.canRead();
		data.hasWritableJournalField = false;
		data.hasReadableJournalField = false;
		if (data.canRead && !data.isNewRecord) {
			data.stream = $sp.getStream(data.table, data.sys_id);
			// Journal fields come in correct order already
			// so grab the first 2 writeable fields
			if ('journal_fields' in data.stream) {
				var jf = data.stream.journal_fields;
				for(var i=0; i < jf.length; i++){
					if (jf[i].can_read === true)
						data.hasReadableJournalField = true;
					if (jf[i].can_write === true){
						data.hasWritableJournalField = true;
						if (!data.primaryJournalField)
							data.primaryJournalField = jf[i];
						else if (data.includeExtended && !data.secondaryJournalField)
							data.secondaryJournalField = jf[i];
						else
							break;
					}
				}
			}

		}

		data.tableLabel = gr.getLabel();
	}
	

})(data, input);]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>douglas.schamberg</sys_created_by>
        <sys_created_on>2020-03-10 19:35:17</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>c5844f90db6b0890f2551329689619d9</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Ratelock Ticket Conversations</sys_name>
        <sys_package display_value="Ratelock" source="x_momo_ratelock">605affb71badc01048a242e58d4bcb76</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Ratelock">605affb71badc01048a242e58d4bcb76</sys_scope>
        <sys_update_name>sp_widget_c5844f90db6b0890f2551329689619d9</sys_update_name>
        <sys_updated_by>douglas.schamberg</sys_updated_by>
        <sys_updated_on>2020-03-10 19:35:17</sys_updated_on>
        <template><![CDATA[<div>
  <div ng-if="!data.canRead && !data.isNewRecord">
    ${Requested record not found}
  </div>
  <div ng-if="data.canRead && !data.isNewRecord" class="panel panel-{{options.color}} b ticket_conversation" >
    <div class="panel-heading">

      <div class="h2 panel-title panel-title-container">
        <h2 class="h4 panel-title" aria-label="{{::data.ticketTitle}} ${Ticket history}" >{{::data.ticketTitle}}</h2>

        <div class="pull-right panel-title-icons">
          <ul>
            <li>
            	<button class="panel-button btn btn-link hidden-xs btn-templates" ng-class="{'active': isShowingTemplates}" ng-click="showTemplatesBar()" title="{{ templateButtonTitle }}">
                <span class="glyphicon glyphicon-folder-close" ng-if="!isShowingTemplates"></span>
                <span class="glyphicon glyphicon-folder-open" ng-if="isShowingTemplates"></span>
              </button>
            </li>
            <li>
              <button href ng-show="data.showLocationIcon && data.canWrite" class="panel-button btn btn-link" ng-click="checkInLocation()" title="{{data.checkInLocMsg}}">
                <span class="glyphicon glyphicon-globe"></span>
              </button>
            </li>
            <li>
              <button href class="panel-button btn btn-link" ng-show="isNative" ng-click="scanBarcode()" title="{{data.scanBarcodeMsg}}">
                <span class="glyphicon glyphicon-barcode"></span>
              </button>
            </li>
            <li ng-if="::(!data.hideAttachmentBtn)"><sp-attachment-button ng-if="::data.canWrite && data.canAttach"></sp-attachment-button></li>
          </ul>
        </div>
      </div>

    </div>

    <div class="panel-body">
      <div ng-if="data.hasReadableJournalField">
        <widget id="ratelock_templates_list" options="{'table': 'x_momo_ratelock_templates'}"></widget>
        <form ng-submit="postEntry(data.journalEntry)" id="sand">
          <div ng-show="data.hasWritableJournalField" class="input-group">
            <span class="input-group-btn hidden-xs" style="vertical-align: top" ng-if="::(data.secondaryJournalField && data.secondaryJournalField.can_write)">
            	<button uib-btn-checkbox
                     class="btn btn-primary"
                     btn-checkbox-false
                     ng-model="::data.useSecondaryJournalField" 
                     ng-change="updateFormWithJournalFields()"
                     ng-bind-html="getPlaceholder(true)"
              >
              </button>
            </span>
            <textarea ng-keypress="keyPress($event)"
                      sn-resize-height="trim"
                      rows="1" id="post-input"
                      class="form-control no-resize overflow-hidden"
                      ng-model='data.journalEntry'
                      ng-class="{'secondary-journal-field': data.useSecondaryJournalField, 'primary-journal-field': !data.useSecondaryJournalField}"
                      ng-model-options='{debounce: 250}'
                      ng-attr-placeholder="{{getPlaceholder()}}"
                      aria-label="{{getPlaceholder()}}"
                      autocomplete="off"
                      ng-change="userTyping(data.journalEntry)"/>
            <span class="input-group-btn" style="vertical-align: top">
              <input type="submit" class="btn btn-primary" value="{{data.btnLabel}}" ng-disabled="data.isPosting"/>
            </span>
            
          </div>
        </form>
        <ul class="list-group m-b-none" ng-if="typing.length > 0">
          <li class="list-group-item user-typing m-t" ng-repeat="u in typing">${{{::u.user_display_name}} is typing}</li>
        </ul>
        <ul class="list-group m-b-none m-t" ng-if="msg">
          <li class="list-group-item user-typing">{{msg}}</li>
        </ul>
        <div class="timeline-container">
          <ul role="list" class="timeline" aria-label="${Ticket history}">
            <li class="timeline-item" ng-class="::{'timeline-inverted': e.user_sys_id == data.stream.user_sys_id} " ng-repeat="e in data.mergedEntries">
              <div class="timeline-badge">
                <sn-avatar-once
                           ng-if="hasLiveProfile(e.user_sys_id)"
                           primary="getLiveProfileByUserId(e.user_sys_id)"
                           class="avatar-large"
                           show-presence="false"
                           enable-context-menu="false">
                </sn-avatar-once>
              </div>
              <div class="timeline-panel">
                <div class="timeline-panel-inner" ng-style="::{'border-color': getFieldColor(e.element)}">
                  <div class="timeline-heading">
                    <div class="timeline-title h4">{{::e.name}}</div>
                    <p class = "time-text">
                      <small class="text-muted" >
                        <span class="glyphicon glyphicon-time" aria-hidden="true" tabindex="-1" />
                        <sn-time-ago  timestamp="::e.sys_created_on"  /> 
                      </small>
                      <i ng-if="::e.field_label" class="fa fa-circle text-muted" aria-hidden="true"></i>
                      <small class = "text-muted journal-type">{{::e.field_label}}</small>
                    </p>
                  </div>
                  <div class="timeline-body">
                    <p ng-if="::(e.element != 'attachment')" ng-bind-html="::e.value"></p>
                    <div ng-if="::(e.element == 'attachment')">
                      <a ng-if="(e.attachment.state == 'available')" target="_blank" href="/sys_attachment.do?view=true&sys_id={{::e.attachment.sys_id}}" title="${View}">
                        <img ng-if="e.attachment.thumbnail_path" alt="" ng-src="/{{::e.attachment.path}}?t=medium" class="img-responsive"/>
                      </a>
                      <a ng-if="(e.attachment.state == '' || e.attachment.state == 'pending' || e.attachment.state == 'available_conditionally')" ng-click="scanAttachment(e.attachment)" href="javascript:void(0)" title="${View}">
                        <img ng-if="e.attachment.thumbnail_path" alt="" ng-src="/{{::e.attachment.path}}?t=medium" class="img-responsive"/>
                      </a>
                      <div>
                        <div ng-if="(e.attachment.state == 'available')">
                        <a href="/sys_attachment.do?sys_id={{::e.attachment.sys_id}}" target="_blank" title="{{dataViewMsg}}"><strong>{{e.attachment.file_name}}</strong></a><br/>
                        {{::e.attachment.size}}
                      </div>
                      <div ng-if="(e.attachment.state == 'not_available')">
                        <span title="{{dataViewMsg}}" class="not_available">{{e.attachment.file_name}}</span><br/>
                        <span class="error">{{::data.scanFailedMsg}}</span>
                      </div>
                      <div ng-if="(e.attachment.state == '' || e.attachment.state == 'pending' || e.attachment.state == 'available_conditionally')">
                        <a href="javascript:void(0)" ng-click="scanAttachment(e.attachment)" title="{{dataViewMsg}}"><strong>{{e.attachment.file_name}}</strong></a><br/>
                        {{::e.attachment.size}}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </li>
            <li role="listitem" class="timeline-item timeline-inverted" aria-label="{{data.stream.user_full_name}}">
              <div class="timeline-badge">
                <sn-avatar-once
                           ng-if="hasLiveProfile(data.stream.user_sys_id)"
                           primary="getLiveProfileByUserId(data.stream.user_sys_id)"
                           class="avatar-large"
                           show-presence="false"
                           enable-context-menu="false">
                </sn-avatar-once>
              </div>
              <div class="timeline-panel timeline-panel-first-item">
                <div class="timeline-heading">
                  <div class="timeline-title h4">{{data.stream.user_full_name}}</div>
                  <p>
                    <small class="text-muted">
                      <span class="glyphicon glyphicon-time" aria-hidden="true" tabindex="-1" />
                      <sn-time-ago timestamp="data.created_on" />
                    </small>
                  </p>
                </div>
                <div class="timeline-body">
                  <p>{{data.number}} ${Created}</p>
                </div>
              </div>
            </li>
            <li role="presentation" aria-hidden="true">
              <div class="timeline-badge-wrap">
              <div class="timeline-badge success">
                  <span>${Start}</span>
              </div>
              </div>            	              
            </li>            
          </ul>
        </div>

      </div>
      <div ng-if="!data.hasReadableJournalField">
        {{options.no_readable_journal_field_message}}
      </div>
    </div>
  </div>
</div>]]></template>
    </sp_widget>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Ratelock">605affb71badc01048a242e58d4bcb76</application>
        <file_path/>
        <instance_id>94e8281edbb7470060a6f0e5bf9619f6</instance_id>
        <instance_name>movementdev</instance_name>
        <name>sp_widget_c5844f90db6b0890f2551329689619d9</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_widget"&gt;&lt;sp_widget action="INSERT_OR_UPDATE"&gt;&lt;category&gt;custom&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[function spTicketConversation($scope, nowAttachmentHandler, ratelockSession, $animate, $rootScope, cabrillo, $timeout, snRecordWatcher, spUtil, spAriaUtil, $http, $window, snAttachmentHandler, i18n) {
	$scope.showLocationIcon = false;
	$scope.msg = "";
	$scope.isNative = cabrillo.isNative();
	$scope.errorMessages = [];
	var existingEntries = {};
	var c = this;
	var skipNextRecordWatchUpdate = false;
	$scope.typing = [];
	if (!$scope.data.hasReadableJournalField &amp;&amp; !$scope.data.isNewRecord)
		console.warn("No readable journal field (comments, work notes, etc.) available in the stream for this record");
	if ($scope.page &amp;&amp; $scope.page.g_form)
		hideParentJournalFields();
	
	$rootScope.$on('template.text.added', function(event, text) {
		$scope.data.journalEntry = text.trim();
	});
	
	$scope.isShowingTemplates = true;
	$scope.templateButtonTitle = "Hide Templates Bar";
	$scope.showTemplatesBar = function() {
		$scope.isShowingTemplates = !$scope.isShowingTemplates;
		if ($scope.isShowingTemplates) {
			$scope.templateButtonTitle = "Hide Templates Bar";
		} else {
			$scope.templateButtonTitle = "Show Templates Bar";
		}
		$rootScope.$broadcast('ratelock.templates.isShowing', $scope.isShowingTemplates);
	}

	function hideParentJournalFields() {
		if (!$scope.data.stream)
			return;

		var fields = $scope.data.stream.journal_fields;
		var g_form = $scope.page.g_form;
		for (var f in fields)
			g_form.setDisplay(fields[f].name, false);
	}
	var liveProfiles = {};
	liveProfiles[$scope.user.sys_id] = {
		userID: $scope.user.sys_id,
		name: $scope.user.name,
		initials: $window.NOW.user_initials
	};
	if ($window.NOW.user_avatar) {
		liveProfiles[$scope.user.sys_id].userImage = $window.NOW.user_avatar;
	}

	$scope.getLiveProfileByUserId = function (userId){
		return liveProfiles[userId];
	}

	var pending = {};

	//Little caching implementation to make sure we only get a given user's profile once.
	$scope.hasLiveProfile = function hasLiveProfile(userId){
		if (!userId)
			return false;

		if (liveProfiles[userId])
			return true;
		
		if (pending[userId])
			return false;
		
		pending[userId] = $http.get('/api/now/live/profiles/sys_user.' + userId).then(function (response) {
			liveProfiles[userId] = {
				userID: userId,
				name: response.data.result.name,
				initials: buildInitials(response.data.result.name),
				avatar: response.data.result.avatar
			};
		});
		return false;
	}

	function buildInitials(name) {
		if (!name)
			return "--";

		var initials = name.split(" ").map(function(word) {
			return word.toUpperCase();
		}).filter(function(word) {
			return word.match(/^[A-Z]/);
		}).map(function(word) {
			return word.substring(0,1);
		}).join("");

		return (initials.length &gt; 3) ? initials.substr(0, 3) : initials;
	}


	function setupAttachmentHandler(){
		$scope.attachmentHandler = new nowAttachmentHandler(attachSuccess, appendError);

		function attachSuccess() {
			$rootScope.$broadcast("sp.attachments.update", $scope.data.sys_id);
			spAriaUtil.sendLiveMessage($scope.data.attachAddedMsg);
		}

		function appendError(error) {
			spUtil.addErrorMessage(error.msg + error.fileName);
			$scope.errorMessages.push(error);
			spAriaUtil.sendLiveMessage($scope.data.attachFailMsg);
		}

		$timeout(function() {
			$scope.attachmentHandler.setParams($scope.data.table, $scope.data.sys_id, 1024 * 1024 * $scope.data.maxAttachmentSize);
		})
	}
	setupAttachmentHandler();

	var recordWatcherTimer;
	$scope.$on('record.updated', function(name, data) {
		// Use record watcher update if:
		//	This record was updated AND This widget didn't trigger the update.
		if (data.table_name == $scope.data.table &amp;&amp; data.sys_id == $scope.data.sys_id){
			$timeout.cancel(recordWatcherTimer);
			recordWatcherTimer = $timeout(function(){
				if (skipNextRecordWatchUpdate)
					skipNextRecordWatchUpdate = false;
				else
					spUtil.update($scope).then(function(r){
						$scope.data.stream = r.stream;
					});
			}, 250);
		}
	});

	$scope.$on('sp.show_location_icon', function(evt) {
		$scope.data.showLocationIcon = true;
	});
	
	$scope.$on('attachment.updated', function(evt,options) {
		if ($scope.data.sys_id != -1 &amp;&amp; options.sys_id == $scope.data.sys_id)
			updateAttachmentState($scope.data.table, $scope.data.sys_id);
	});
	

	function updateAttachmentState(table, sys_id) {
			c.server.update().then(function (data) {
					if (!data.stream || !data.stream.entries)
						return;
					var newEntries = data.stream.entries;
					var currEntries = $scope.data.mergedEntries;
					var oldSize = currEntries ? currEntries.length : 0;
					var newSize = newEntries.length;
					for (var i = 0; i &lt; oldSize; i++) {
							if (!currEntries[i].attachment)
									continue;
							for (var j = 0; j &lt; newSize; j++) {
									if (currEntries[i].sys_id == newEntries[j].sys_id &amp;&amp; newEntries[j].attachment) {
											currEntries[i].attachment.state = newEntries[j].attachment.state;
											break;
									}
							}
					}
			});
	}
	
	$scope.scanAttachment = function(attachment){
		snAttachmentHandler.scanAttachment(attachment);
	}
	
	$rootScope.$on('sp.sessions', function(evt, sessions) {
		$scope.typing = [];
		Object.keys(sessions).forEach(function (session) {
			var journalFields = $scope.data.stream.journal_fields;
			var canUserReadJournalField = false;
			session = sessions[session];
			
			for (var j = 0; j &lt; journalFields.length; j++) {
				if (journalFields[j].name === session.field_type) {
					canUserReadJournalField = journalFields[j].can_read;
					break;
				}									
			}
			
			if (session.status === 'typing' &amp;&amp; canUserReadJournalField) {
				$scope.typing.push(session);
			}
				
			else
				return;
	
		})
	})

	$scope.$on('sp.conversation_title.changed', function(evt, text) {
		$scope.data.ticketTitle = text;
	})

	$scope.$watch("data.canWrite", function() {
		$rootScope.$broadcast("sp.record.can_write", $scope.data.canWrite);
	});

	var streamUpdateTimer;
	$scope.$watch("data.stream", function() {
		$timeout.cancel(streamUpdateTimer);
		streamUpdateTimer = $timeout(function() {
			mergeStreamEntries();
		}, 50);
	});

	function mergeStreamEntries() {
		$scope.placeholder = $scope.data.placeholderNoEntries;
		if (!$scope.data.stream || !$scope.data.stream.entries)
			return;

		$scope.placeholder = $scope.data.placeholder;
		var entries = $scope.data.stream.entries;
		if (!$scope.data.mergedEntries) {
			$scope.data.mergedEntries = $scope.data.stream.entries.slice();
			for (var i = 0; i &lt; entries.length; i++) {
				existingEntries[entries[i].sys_id] = true;
			}

			return;
		}

		var mergedEntries = $scope.data.mergedEntries;
		for (var i = entries.length-1; i &gt;= 0; i--) {
			var curEntry = entries[i];
			if (isNewEntry(mergedEntries, curEntry)){
				mergedEntries.unshift(curEntry);
				existingEntries[curEntry.sys_id] = true;
			}
		}
	}

	function isNewEntry(mergedEntries, item) {
		for (var i=0; i &lt; mergedEntries.length; i++) {
			if (mergedEntries[i].sys_id === item.sys_id) {
				return false;
			}
		}
		return true;
	}

	$scope.getPlaceholder = function(isUseLabel) {
		if ($scope.data.use_dynamic_placeholder &amp;&amp; $scope.data.useSecondaryJournalField)
			return $scope.data.secondaryJournalField.label;
		if (isUseLabel &amp;&amp; $scope.data.use_dynamic_placeholder &amp;&amp; !$scope.data.useSecondaryJournalField)
			return $scope.data.primaryJournalField.label;
		return $scope.placeholder;
	};

	var colorCache;
	$scope.getFieldColor = function(fieldName) {
		var defaultColor = "transparent";
		if (colorCache) {
			if (fieldName in colorCache)
				return colorCache[fieldName];
			else
				return defaultColor;
		}

		colorCache = {};
		var jf = $scope.data.stream.journal_fields;
		for (var i=0; i&lt;jf.length;i++) {
			colorCache[jf[i].name] = jf[i].color || defaultColor;
		}
		return $scope.getFieldColor(fieldName);
	}

	$scope.checkInLocation = function() {
		$rootScope.$broadcast("check_in_location");
		$rootScope.$broadcast("location.sharing.start");
	}

	$scope.$on("location.sharing.end", function() {
		$timeout(function() {$scope.msg = ""}, 500);
	})

	$scope.$on("location.sharing.start", function() {
		$scope.msg = $scope.data.sharingLocMsg;
	})

	$scope.scanBarcode = function() {
		$rootScope.$broadcast("scan_barcode");
	}

	$scope.$on("attachment.upload.start", function() {
		$scope.data.isPosting = true;
		$scope.msg = $scope.data.uploadingAttachmentMsg;
	})

	$scope.$on("attachment.upload.stop", function() {
		$scope.data.isPosting = false;
		$scope.msg = "";
		//update the stream so we get the new attachment
		spUtil.update($scope).then(function(r) {
			$scope.data.stream = r.stream;
		});
	});

	$scope.data.isPosting = false;

	$scope.postEntry = function(input) {
		post(input);
	};

	function post(input) {
		if ($scope.data.isPosting)
			return;

		if (!input)
			return;

		input = input.trim();
		$scope.data.journalEntry = input;

		if ($scope.data.useSecondaryJournalField)
			$scope.data.journalEntryField = $scope.data.secondaryJournalField.name;
		else
			$scope.data.journalEntryField = $scope.data.primaryJournalField.name;
		$scope.data.isPosting = true;
		spUtil.update($scope).then(function(){
			$scope.data.isPosting = false;
			reset();
			spAriaUtil.sendLiveMessage($scope.data.messagePostedMsg);
			$timeout(function() {
				$scope.setFocus(); // sets focus back on input, defined in "link"
			});
		});
		skipNextRecordWatchUpdate = true;
		$scope.setFocus(); // sets focus back on input, defined in "link"
	}

	var reset = function(){
		$scope.userTyping("");
		$scope.data.journalEntry = "";
		$scope.updateFormWithJournalFields();
		$scope.data.useSecondaryJournalField = false;
		$scope.data.journalEntryField = "";
	}

	$scope.keyPress = function(event) {
		if ($scope.data.isPosting) {
			event.preventDefault();
			return;
		}
	}

	$scope.userTyping = function(input) {
		var status = "viewing";
		if (input.length)
			status = "typing";
		ratelockSession.publish($scope.data.table, $scope.data.sys_id, {
			session_id: $window.NOW.session_id,
			sys_id: $scope.data.sys_id,
			user_avatar: $window.NOW.user_avatar,
			user_initials: $window.NOW.user_initials,
			user_display_name: $window.NOW.user_display_name,
			user_name: $window.NOW.user_name,
			status: status
		});
		
		$scope.$emit("record.typing", {status: status, value: input, table: $scope.data.table, sys_id: $scope.data.sys_id});
		$scope.updateFormWithJournalFields();
	}
	$scope.updateFormWithJournalFields = function () {
		var fieldName, fieldToClear = "";
		if ($scope.data.useSecondaryJournalField) {
			fieldName = $scope.data.secondaryJournalField.name;
			fieldToClear = $scope.data.primaryJournalField.name;
		} else {
			fieldName = $scope.data.primaryJournalField.name;
			fieldToClear = "";
		}
		$scope.$emit("activity_stream_is_changed", {"fieldName": fieldName, "fieldToClear": fieldToClear, "input": $scope.data.journalEntry});
	}
}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;.panel-title {
  display: inline;
}

.panel-body {
  background-color: #fff;
}

.btn.btn-link.active {
	color: $brand-primary;
}

.panel {
  background-color: transparent !important;
}

.btn-primary:focus {
	border: 1px solid $brand-primary;
  box-shadow: 0px 0px 5px $brand-primary;
}

.form-control:focus {
		border-color: $brand-primary;
    outline: 4px solid transparent;
    outline: 5px auto transparent;
    -webkit-box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px rgba(224, 58, 58, 0.6);
    box-shadow: inset 0 1px 1px rgba(0, 0, 0, .075), 0 0 8px rgba(224, 58, 58, 0.6);
}

.secondary-journal-field {
	border: 1px solid gold;
}

.primary-journal-field {
	border: 1px solid #ccc;
}

.panel-title-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.panel-title-icons {

  ul {
    display: flex;
    align-items: center;
    padding: 0;
    margin: 0;
  }
  li {
    padding: 0;
    margin: 0;

    .panel-button {
      display: flex;
      align-items: center;
      margin: 0 0 0 15px;
      line-height: initial;
			
      &amp;amp;:hover, &amp;amp;:focus {
        border-color: transparent;
    		outline: none;
    		-webkit-box-shadow: inset 0 0px 0px rgba(0, 0, 0, .075), 0 0 0px rgba(224, 58, 58, 0.6);
    		box-shadow: inset 0  0px 0px rgba(0, 0, 0, .075), 0 0 0px rgba(224, 58, 58, 0.6);
        text-decoration: none;
      }
      &amp;amp;:not(.active):focus {
      	color: #000;
      }
      &amp;amp;:not(.btn-templates):hover {
      	color: $brand-primary;
      }
    }
  }
}


.timeline-heading test {
  float:right;
}

.timeline-body &amp;gt; p {
  white-space: pre-wrap;
  overflow-x: hidden;
}

.timeline-body ul &amp;gt; li {
  float: none;
}

.no-resize {
  resize: none;
}

.journal-field-indicator {
  width: 5px;
  position: absolute;
  left: 5px;
  top: 5px;
  bottom: 5px;
  z-index: 3;
}

.panel-heading {
  word-wrap: break-word;
}

.avatar-container {
  cursor: default;
}

ul {
  list-style: none;
}

.overflow-hidden {
  overflow: hidden;
}


.timeline-badge-wrap {
  margin: auto;
  max-width: 115px;
}

.timeline-badge.success {
  background-color: $success;
}

.timeline-badge {
  position: relative;
  left:25%;
  width:50%;
  padding-bottom:50%;
  border-radius:50%;
}

.timeline-badge span{
  position:absolute;
  top:50%;
  left: 50%;
  transform: translate(-50%, -50%);
  font-size:13px;
  color: #fff;
}

.journal-type {
 	display: inline-flex;
  display: -ms-inline-flexbox;
  flex-wrap: wrap;
  -webkit-justify-content: flex-end;
}

.fa-circle {
  font-size: 4px;
  padding: 7px;
}

@media (max-width: 768px) {
  .timeline-badge-wrap {
    margin: 0;
  }
  .timeline-badge {
    left: 10%;
  }
}
&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data&gt;{"options": {&amp;#13;
	"sys_id": -1,&amp;#13;
		"table": "incident"&amp;#13;
	}&amp;#13;
}&lt;/demo_data&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;false&lt;/has_preview&gt;&lt;id/&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function ratelockTicketLink(scope, elm) {
  // Set the focus back on the input for IE11
  scope.setFocus = function () {
    var input = $(elm[0]).find('textarea#post-input');
    if (input[0]) {
      input[0].focus();
    }
  }
}]]&gt;&lt;/link&gt;&lt;name&gt;Ratelock Ticket Conversations&lt;/name&gt;&lt;option_schema&gt;[{"hint":"Placeholder text shows selected journal field","name":"use_dynamic_placeholder","section":"Behavior","label":"Use dynamic placeholder","type":"boolean"},{"hint":"Message to show when record has no readable journal field","name":"no_readable_journal_field_message","default_value":"","section":"Presentation","label":"No readable journal field message","type":"string"}]&lt;/option_schema&gt;&lt;public&gt;false&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function(data, input) {
	data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
	if (isNaN(data.maxAttachmentSize))
		data.maxAttachmentSize = 24;
	data.uploadingAttachmentMsg = gs.getMessage("Uploading attachment...");
	data.sharingLocMsg = gs.getMessage("Sharing location...");
	data.scanBarcodeMsg = gs.getMessage("Scan barcode");
	data.checkInLocMsg = gs.getMessage("Check in location");
	data.messagePostedMsg = gs.getMessage("Message has been sent");
	data.viewMsg = gs.getMessage("View");
	data.attachAddedMsg = gs.getMessage("Attachment added");
	data.attachFailMsg = gs.getMessage("Failed to add attachment");
	data.scanFailedMsg = gs.getMessage("File failed security scan");
	data.sys_id = (input ? input.sys_id : undefined) || options.sys_id || $sp.getParameter("sys_id");
	data.table = (input ? input.table : undefined) || options.table || $sp.getParameter("table");
	// don't use options.title unless sys_id and table also come from options
	if (options &amp;&amp; options.sys_id &amp;&amp; options.table)
		data.ticketTitle = options.title;
	data.placeholder = options.placeholder || gs.getMessage("Type your message here...");
	data.placeholderNoEntries = options.placeholderNoEntries || gs.getMessage("Type your message here...");
	data.btnLabel = options.btnLabel || gs.getMessage("Send");
	data.includeExtended = options.includeExtended || false;
	data.use_dynamic_placeholder = options.use_dynamic_placeholder;
	data.hideAttachmentBtn = options.hideAttachmentBtn;

	var gr = new GlideRecord(data.table);
	data.isNewRecord = data.sys_id == -1 || gr.isNewRecord();
	if (!gr.isValid())
		return;

	gr.addQuery('sys_id', data.sys_id);
	gr.query();
	while(gr.next()) {
		if (!gr.canRead())
			return;

		data.table = gr.getRecordClassName(); // use actual table for the record
		options.no_readable_journal_field_message = options.no_readable_journal_field_message || gs.getMessage("No readable comment field");
		data.number = gr.getDisplayValue('number');
		data.created_on = gr.getValue('sys_created_on');

		if (input) { // if we have input then we're saving
			if (input.journalEntry &amp;&amp; input.journalEntryField){
				if (gr.canWrite(input.journalEntryField)){
					gr[input.journalEntryField] = input.journalEntry;
					gr.update();
					$sp.logStat('Comments', data.table, data.sys_id, input.journalEntry);
				}
				data.canWriteToEntryField = gr.canWrite(input.journalEntryField);
			}
			data.ticketTitle = input.ticketTitle;
			data.placeholder = input.placeholder;
			data.btnLabel = input.btnLabel;
			data.includeExtended = input.includeExtended;
		} else {
			if (!data.ticketTitle) {
				if (gr.short_description.canRead())
					data.ticketTitle = gr.getDisplayValue("short_description");
				if (!data.ticketTitle)
					data.ticketTitle = data.number;
			}

			$sp.logStat('Task View', data.table, data.sys_id);
		}

		data.canWrite = gr.canWrite();
		data.canAttach = gs.hasRole(gs.getProperty("glide.attachment.role"));
		data.canRead = gr.canRead();
		data.hasWritableJournalField = false;
		data.hasReadableJournalField = false;
		if (data.canRead &amp;&amp; !data.isNewRecord) {
			data.stream = $sp.getStream(data.table, data.sys_id);
			// Journal fields come in correct order already
			// so grab the first 2 writeable fields
			if ('journal_fields' in data.stream) {
				var jf = data.stream.journal_fields;
				for(var i=0; i &lt; jf.length; i++){
					if (jf[i].can_read === true)
						data.hasReadableJournalField = true;
					if (jf[i].can_write === true){
						data.hasWritableJournalField = true;
						if (!data.primaryJournalField)
							data.primaryJournalField = jf[i];
						else if (data.includeExtended &amp;&amp; !data.secondaryJournalField)
							data.secondaryJournalField = jf[i];
						else
							break;
					}
				}
			}

		}

		data.tableLabel = gr.getLabel();
	}
	

})(data, input);]]&gt;&lt;/script&gt;&lt;servicenow&gt;false&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;douglas.schamberg&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-03-10 19:35:17&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;c5844f90db6b0890f2551329689619d9&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;Ratelock Ticket Conversations&lt;/sys_name&gt;&lt;sys_package display_value="Ratelock" source="x_momo_ratelock"&gt;605affb71badc01048a242e58d4bcb76&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="Ratelock"&gt;605affb71badc01048a242e58d4bcb76&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_c5844f90db6b0890f2551329689619d9&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;douglas.schamberg&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-03-10 19:35:17&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;div&gt;
  &lt;div ng-if="!data.canRead &amp;&amp; !data.isNewRecord"&gt;
    ${Requested record not found}
  &lt;/div&gt;
  &lt;div ng-if="data.canRead &amp;&amp; !data.isNewRecord" class="panel panel-{{options.color}} b ticket_conversation" &gt;
    &lt;div class="panel-heading"&gt;

      &lt;div class="h2 panel-title panel-title-container"&gt;
        &lt;h2 class="h4 panel-title" aria-label="{{::data.ticketTitle}} ${Ticket history}" &gt;{{::data.ticketTitle}}&lt;/h2&gt;

        &lt;div class="pull-right panel-title-icons"&gt;
          &lt;ul&gt;
            &lt;li&gt;
            	&lt;button class="panel-button btn btn-link hidden-xs btn-templates" ng-class="{'active': isShowingTemplates}" ng-click="showTemplatesBar()" title="{{ templateButtonTitle }}"&gt;
                &lt;span class="glyphicon glyphicon-folder-close" ng-if="!isShowingTemplates"&gt;&lt;/span&gt;
                &lt;span class="glyphicon glyphicon-folder-open" ng-if="isShowingTemplates"&gt;&lt;/span&gt;
              &lt;/button&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;button href ng-show="data.showLocationIcon &amp;&amp; data.canWrite" class="panel-button btn btn-link" ng-click="checkInLocation()" title="{{data.checkInLocMsg}}"&gt;
                &lt;span class="glyphicon glyphicon-globe"&gt;&lt;/span&gt;
              &lt;/button&gt;
            &lt;/li&gt;
            &lt;li&gt;
              &lt;button href class="panel-button btn btn-link" ng-show="isNative" ng-click="scanBarcode()" title="{{data.scanBarcodeMsg}}"&gt;
                &lt;span class="glyphicon glyphicon-barcode"&gt;&lt;/span&gt;
              &lt;/button&gt;
            &lt;/li&gt;
            &lt;li ng-if="::(!data.hideAttachmentBtn)"&gt;&lt;sp-attachment-button ng-if="::data.canWrite &amp;&amp; data.canAttach"&gt;&lt;/sp-attachment-button&gt;&lt;/li&gt;
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/div&gt;

    &lt;div class="panel-body"&gt;
      &lt;div ng-if="data.hasReadableJournalField"&gt;
        &lt;widget id="ratelock_templates_list" options="{'table': 'x_momo_ratelock_templates'}"&gt;&lt;/widget&gt;
        &lt;form ng-submit="postEntry(data.journalEntry)" id="sand"&gt;
          &lt;div ng-show="data.hasWritableJournalField" class="input-group"&gt;
            &lt;span class="input-group-btn hidden-xs" style="vertical-align: top" ng-if="::(data.secondaryJournalField &amp;&amp; data.secondaryJournalField.can_write)"&gt;
            	&lt;button uib-btn-checkbox
                     class="btn btn-primary"
                     btn-checkbox-false
                     ng-model="::data.useSecondaryJournalField" 
                     ng-change="updateFormWithJournalFields()"
                     ng-bind-html="getPlaceholder(true)"
              &gt;
              &lt;/button&gt;
            &lt;/span&gt;
            &lt;textarea ng-keypress="keyPress($event)"
                      sn-resize-height="trim"
                      rows="1" id="post-input"
                      class="form-control no-resize overflow-hidden"
                      ng-model='data.journalEntry'
                      ng-class="{'secondary-journal-field': data.useSecondaryJournalField, 'primary-journal-field': !data.useSecondaryJournalField}"
                      ng-model-options='{debounce: 250}'
                      ng-attr-placeholder="{{getPlaceholder()}}"
                      aria-label="{{getPlaceholder()}}"
                      autocomplete="off"
                      ng-change="userTyping(data.journalEntry)"/&gt;
            &lt;span class="input-group-btn" style="vertical-align: top"&gt;
              &lt;input type="submit" class="btn btn-primary" value="{{data.btnLabel}}" ng-disabled="data.isPosting"/&gt;
            &lt;/span&gt;
            
          &lt;/div&gt;
        &lt;/form&gt;
        &lt;ul class="list-group m-b-none" ng-if="typing.length &gt; 0"&gt;
          &lt;li class="list-group-item user-typing m-t" ng-repeat="u in typing"&gt;${{{::u.user_display_name}} is typing}&lt;/li&gt;
        &lt;/ul&gt;
        &lt;ul class="list-group m-b-none m-t" ng-if="msg"&gt;
          &lt;li class="list-group-item user-typing"&gt;{{msg}}&lt;/li&gt;
        &lt;/ul&gt;
        &lt;div class="timeline-container"&gt;
          &lt;ul role="list" class="timeline" aria-label="${Ticket history}"&gt;
            &lt;li class="timeline-item" ng-class="::{'timeline-inverted': e.user_sys_id == data.stream.user_sys_id} " ng-repeat="e in data.mergedEntries"&gt;
              &lt;div class="timeline-badge"&gt;
                &lt;sn-avatar-once
                           ng-if="hasLiveProfile(e.user_sys_id)"
                           primary="getLiveProfileByUserId(e.user_sys_id)"
                           class="avatar-large"
                           show-presence="false"
                           enable-context-menu="false"&gt;
                &lt;/sn-avatar-once&gt;
              &lt;/div&gt;
              &lt;div class="timeline-panel"&gt;
                &lt;div class="timeline-panel-inner" ng-style="::{'border-color': getFieldColor(e.element)}"&gt;
                  &lt;div class="timeline-heading"&gt;
                    &lt;div class="timeline-title h4"&gt;{{::e.name}}&lt;/div&gt;
                    &lt;p class = "time-text"&gt;
                      &lt;small class="text-muted" &gt;
                        &lt;span class="glyphicon glyphicon-time" aria-hidden="true" tabindex="-1" /&gt;
                        &lt;sn-time-ago  timestamp="::e.sys_created_on"  /&gt; 
                      &lt;/small&gt;
                      &lt;i ng-if="::e.field_label" class="fa fa-circle text-muted" aria-hidden="true"&gt;&lt;/i&gt;
                      &lt;small class = "text-muted journal-type"&gt;{{::e.field_label}}&lt;/small&gt;
                    &lt;/p&gt;
                  &lt;/div&gt;
                  &lt;div class="timeline-body"&gt;
                    &lt;p ng-if="::(e.element != 'attachment')" ng-bind-html="::e.value"&gt;&lt;/p&gt;
                    &lt;div ng-if="::(e.element == 'attachment')"&gt;
                      &lt;a ng-if="(e.attachment.state == 'available')" target="_blank" href="/sys_attachment.do?view=true&amp;sys_id={{::e.attachment.sys_id}}" title="${View}"&gt;
                        &lt;img ng-if="e.attachment.thumbnail_path" alt="" ng-src="/{{::e.attachment.path}}?t=medium" class="img-responsive"/&gt;
                      &lt;/a&gt;
                      &lt;a ng-if="(e.attachment.state == '' || e.attachment.state == 'pending' || e.attachment.state == 'available_conditionally')" ng-click="scanAttachment(e.attachment)" href="javascript:void(0)" title="${View}"&gt;
                        &lt;img ng-if="e.attachment.thumbnail_path" alt="" ng-src="/{{::e.attachment.path}}?t=medium" class="img-responsive"/&gt;
                      &lt;/a&gt;
                      &lt;div&gt;
                        &lt;div ng-if="(e.attachment.state == 'available')"&gt;
                        &lt;a href="/sys_attachment.do?sys_id={{::e.attachment.sys_id}}" target="_blank" title="{{dataViewMsg}}"&gt;&lt;strong&gt;{{e.attachment.file_name}}&lt;/strong&gt;&lt;/a&gt;&lt;br/&gt;
                        {{::e.attachment.size}}
                      &lt;/div&gt;
                      &lt;div ng-if="(e.attachment.state == 'not_available')"&gt;
                        &lt;span title="{{dataViewMsg}}" class="not_available"&gt;{{e.attachment.file_name}}&lt;/span&gt;&lt;br/&gt;
                        &lt;span class="error"&gt;{{::data.scanFailedMsg}}&lt;/span&gt;
                      &lt;/div&gt;
                      &lt;div ng-if="(e.attachment.state == '' || e.attachment.state == 'pending' || e.attachment.state == 'available_conditionally')"&gt;
                        &lt;a href="javascript:void(0)" ng-click="scanAttachment(e.attachment)" title="{{dataViewMsg}}"&gt;&lt;strong&gt;{{e.attachment.file_name}}&lt;/strong&gt;&lt;/a&gt;&lt;br/&gt;
                        {{::e.attachment.size}}
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li role="listitem" class="timeline-item timeline-inverted" aria-label="{{data.stream.user_full_name}}"&gt;
              &lt;div class="timeline-badge"&gt;
                &lt;sn-avatar-once
                           ng-if="hasLiveProfile(data.stream.user_sys_id)"
                           primary="getLiveProfileByUserId(data.stream.user_sys_id)"
                           class="avatar-large"
                           show-presence="false"
                           enable-context-menu="false"&gt;
                &lt;/sn-avatar-once&gt;
              &lt;/div&gt;
              &lt;div class="timeline-panel timeline-panel-first-item"&gt;
                &lt;div class="timeline-heading"&gt;
                  &lt;div class="timeline-title h4"&gt;{{data.stream.user_full_name}}&lt;/div&gt;
                  &lt;p&gt;
                    &lt;small class="text-muted"&gt;
                      &lt;span class="glyphicon glyphicon-time" aria-hidden="true" tabindex="-1" /&gt;
                      &lt;sn-time-ago timestamp="data.created_on" /&gt;
                    &lt;/small&gt;
                  &lt;/p&gt;
                &lt;/div&gt;
                &lt;div class="timeline-body"&gt;
                  &lt;p&gt;{{data.number}} ${Created}&lt;/p&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/li&gt;
            &lt;li role="presentation" aria-hidden="true"&gt;
              &lt;div class="timeline-badge-wrap"&gt;
              &lt;div class="timeline-badge success"&gt;
                  &lt;span&gt;${Start}&lt;/span&gt;
              &lt;/div&gt;
              &lt;/div&gt;            	              
            &lt;/li&gt;            
          &lt;/ul&gt;
        &lt;/div&gt;

      &lt;/div&gt;
      &lt;div ng-if="!data.hasReadableJournalField"&gt;
        {{options.no_readable_journal_field_message}}
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-780394447</payload_hash>
        <record_name>Ratelock Ticket Conversations</record_name>
        <reverted_from/>
        <source>74fc5f651b5a401048a242e58d4bcbbc</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>douglas.schamberg</sys_created_by>
        <sys_created_on>2020-03-10 19:35:17</sys_created_on>
        <sys_id>85844f90db6b0890f2551329689619db</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>170c5f1b5a10000001</sys_recorded_at>
        <sys_updated_by>douglas.schamberg</sys_updated_by>
        <sys_updated_on>2020-03-10 19:35:17</sys_updated_on>
        <type>Widget</type>
        <update_guid>8d844f90dd6b08903e357a973a1df0da</update_guid>
        <update_guid_history>8d844f90dd6b08903e357a973a1df0da:-780394447</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="">55e48fd0db6b0890f255132968961935</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>douglas.schamberg</sys_created_by>
        <sys_created_on>2020-03-10 19:36:56</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_db_object display_value="" name="sp_widget">sp_widget</sys_db_object>
        <sys_id>189f912c48b1483c82fe9925daa077a1</sys_id>
        <sys_metadata>c5844f90db6b0890f2551329689619d9</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Ratelock Ticket Conversations</sys_name>
        <sys_package display_value="Ratelock" source="x_momo_ratelock">605affb71badc01048a242e58d4bcb76</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Ratelock">605affb71badc01048a242e58d4bcb76</sys_scope>
        <sys_scope_delete display_value="">57712118eaee4a49ae47b2048a14ac31</sys_scope_delete>
        <sys_update_name>sp_widget_c5844f90db6b0890f2551329689619d9</sys_update_name>
        <sys_update_version display_value="sp_widget_c5844f90db6b0890f2551329689619d9">85844f90db6b0890f2551329689619db</sys_update_version>
        <sys_updated_by>douglas.schamberg</sys_updated_by>
        <sys_updated_on>2020-03-10 19:36:56</sys_updated_on>
    </sys_metadata_delete>
</record_update>
