<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_angular_provider">
    <sp_angular_provider action="DELETE">
        <name>dragScrollRatelock</name>
        <script><![CDATA[/**
* @license https://jellekralt.mit-license.org/
* @author Jelle Kralt https://github.com/jellekralt
* @repository https://github.com/jellekralt/angular-drag-scroll
*/
function dragScrollRatelock($document, $window, $parse) {
  //Usage:
  //<div drag-scroll>Lorem ipsum dolor sit amet</div>
  return {
    restrict: 'A',
    link: function ($scope, $element, $attributes, vm) {
      var enabled = true;
      var allowedClickOffset = 5;
      var pushed = false;
      var onDragStart = $parse($attributes.onDragStart);
      var onDragEnd = $parse($attributes.onDragEnd);
      var axis = $attributes.axis || false;
      var excludedClasses = $attributes.dragScrollExcludedClasses ? $attributes.dragScrollExcludedClasses.split(',') : [];
      var startClientX;
      var startClientY;
      var lastClientX;
      var lastClientY;

      $scope.$watch($attributes.dragScroll, function (newValue) {
        enabled = newValue !== undefined ? newValue : true;
      });

      // Set event listeners
      $element.on('mousedown', handleMouseDown);

      // Set destroy listener
      $scope.$on('$destroy', destroy);

      /**
       * Sets the event listeners for the mouseup and mousedown events
       */
      function setDragListeners() {
        angular.element($window).on('mouseup', handleMouseUp);
        angular.element($window).on('mousemove', handleMouseMove);
      }

      /**
       * Removes the event listeners for the mouseup and mousedown events
       */
      function removeDragListeners() {
        angular.element($window).off('mouseup', handleMouseUp);
        angular.element($window).off('mousemove', handleMouseMove);
      }

      /**
       * Handles mousedown event
       * @param {object} e MouseDown event
       */
      function handleMouseDown(e) {
        if (enabled) {
          for (var i = 0; i < excludedClasses.length; i++) {
            if (angular.element(e.target).hasClass(excludedClasses[i])) {
              return false;
            }
          }

          $scope.$apply(function () {
            onDragStart($scope);
          });

          // Set mouse drag listeners
          setDragListeners();

          // Set 'pushed' state
          pushed = true;
          lastClientX = startClientX = e.clientX;
          lastClientY = startClientY = e.clientY;

          clearSelection();

          e.preventDefault();
          e.stopPropagation();
        }

      }

      /**
       * Handles mouseup event
       * @param {object} e MouseUp event
       */
      function handleMouseUp(e) {
        if (enabled) {
          var selectable = (e.target.attributes && 'drag-scroll-text' in e.target.attributes);
          var withinXConstraints = (e.clientX >= (startClientX - allowedClickOffset) && e.clientX <= (startClientX + allowedClickOffset));
          var withinYConstraints = (e.clientY >= (startClientY - allowedClickOffset) && e.clientY <= (startClientY + allowedClickOffset));

          // Set 'pushed' state
          pushed = false;

          // Check if cursor falls within X and Y axis constraints
          if (selectable && withinXConstraints && withinYConstraints) {
            // If so, select the text inside the target element
            selectText(e.target);
          }

          $scope.$apply(function () {
            onDragEnd($scope);
          });

          removeDragListeners();
        }

      }

      /**
       * Handles mousemove event
       * @param {object} e MouseMove event
       */
      function handleMouseMove(e) {
        if (enabled) {
          if (pushed) {
            if (!axis || axis === 'x') {
              $element[0].scrollLeft -= (-lastClientX + (lastClientX = e.clientX));
            }
            if (!axis || axis === 'y') {
              $element[0].scrollTop -= (-lastClientY + (lastClientY = e.clientY));
            }
          }

          e.preventDefault();
        }
      }

      /**
       * Destroys all the event listeners
       */
      function destroy() {
        $element.off('mousedown', handleMouseDown);
        angular.element($window).off('mouseup', handleMouseUp);
        angular.element($window).off('mousemove', handleMouseMove);
      }

      /**
       * Selects text for a specific element
       * @param {object} element Selected element
       */
      function selectText(element) {
        var range;
        if ($window.document.selection) {
          range = $window.document.body.createTextRange();
          range.moveToElementText(element);
          range.select();
        } else if ($window.getSelection) {
          range = $window.document.createRange();
          range.selectNode(element);
          $window.getSelection().addRange(range);
        }
      }

      /**
       * Clears text selection
       */
      function clearSelection() {
        if ($window.getSelection) {
          if ($window.getSelection().empty) { // Chrome
            $window.getSelection().empty();
          } else if ($window.getSelection().removeAllRanges) { // Firefox
            $window.getSelection().removeAllRanges();
          }
        } else if ($document.selection) { // IE?
          $document.selection.empty();
        }
      }
    }
  };
}]]></script>
        <sys_class_name>sp_angular_provider</sys_class_name>
        <sys_created_by>douglas.schamberg</sys_created_by>
        <sys_created_on>2020-04-08 08:22:31</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>e17042291b0cdc1048a242e58d4bcb74</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>dragScrollRatelock</sys_name>
        <sys_package display_value="Ratelock" source="x_momo_ratelock">605affb71badc01048a242e58d4bcb76</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Ratelock">605affb71badc01048a242e58d4bcb76</sys_scope>
        <sys_update_name>sp_angular_provider_e17042291b0cdc1048a242e58d4bcb74</sys_update_name>
        <sys_updated_by>douglas.schamberg</sys_updated_by>
        <sys_updated_on>2020-04-08 08:22:31</sys_updated_on>
        <type>directive</type>
    </sp_angular_provider>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Ratelock">605affb71badc01048a242e58d4bcb76</application>
        <file_path/>
        <instance_id>94e8281edbb7470060a6f0e5bf9619f6</instance_id>
        <instance_name>movementdev</instance_name>
        <name>sp_angular_provider_e17042291b0cdc1048a242e58d4bcb74</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_angular_provider"&gt;&lt;sp_angular_provider action="INSERT_OR_UPDATE"&gt;&lt;name&gt;dragScrollRatelock&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/**
* @license https://jellekralt.mit-license.org/
* @author Jelle Kralt https://github.com/jellekralt
* @repository https://github.com/jellekralt/angular-drag-scroll
*/
function dragScrollRatelock($document, $window, $parse) {
  //Usage:
  //&lt;div drag-scroll&gt;Lorem ipsum dolor sit amet&lt;/div&gt;
  return {
    restrict: 'A',
    link: function ($scope, $element, $attributes, vm) {
      var enabled = true;
      var allowedClickOffset = 5;
      var pushed = false;
      var onDragStart = $parse($attributes.onDragStart);
      var onDragEnd = $parse($attributes.onDragEnd);
      var axis = $attributes.axis || false;
      var excludedClasses = $attributes.dragScrollExcludedClasses ? $attributes.dragScrollExcludedClasses.split(',') : [];
      var startClientX;
      var startClientY;
      var lastClientX;
      var lastClientY;

      $scope.$watch($attributes.dragScroll, function (newValue) {
        enabled = newValue !== undefined ? newValue : true;
      });

      // Set event listeners
      $element.on('mousedown', handleMouseDown);

      // Set destroy listener
      $scope.$on('$destroy', destroy);

      /**
       * Sets the event listeners for the mouseup and mousedown events
       */
      function setDragListeners() {
        angular.element($window).on('mouseup', handleMouseUp);
        angular.element($window).on('mousemove', handleMouseMove);
      }

      /**
       * Removes the event listeners for the mouseup and mousedown events
       */
      function removeDragListeners() {
        angular.element($window).off('mouseup', handleMouseUp);
        angular.element($window).off('mousemove', handleMouseMove);
      }

      /**
       * Handles mousedown event
       * @param {object} e MouseDown event
       */
      function handleMouseDown(e) {
        if (enabled) {
          for (var i = 0; i &lt; excludedClasses.length; i++) {
            if (angular.element(e.target).hasClass(excludedClasses[i])) {
              return false;
            }
          }

          $scope.$apply(function () {
            onDragStart($scope);
          });

          // Set mouse drag listeners
          setDragListeners();

          // Set 'pushed' state
          pushed = true;
          lastClientX = startClientX = e.clientX;
          lastClientY = startClientY = e.clientY;

          clearSelection();

          e.preventDefault();
          e.stopPropagation();
        }

      }

      /**
       * Handles mouseup event
       * @param {object} e MouseUp event
       */
      function handleMouseUp(e) {
        if (enabled) {
          var selectable = (e.target.attributes &amp;&amp; 'drag-scroll-text' in e.target.attributes);
          var withinXConstraints = (e.clientX &gt;= (startClientX - allowedClickOffset) &amp;&amp; e.clientX &lt;= (startClientX + allowedClickOffset));
          var withinYConstraints = (e.clientY &gt;= (startClientY - allowedClickOffset) &amp;&amp; e.clientY &lt;= (startClientY + allowedClickOffset));

          // Set 'pushed' state
          pushed = false;

          // Check if cursor falls within X and Y axis constraints
          if (selectable &amp;&amp; withinXConstraints &amp;&amp; withinYConstraints) {
            // If so, select the text inside the target element
            selectText(e.target);
          }

          $scope.$apply(function () {
            onDragEnd($scope);
          });

          removeDragListeners();
        }

      }

      /**
       * Handles mousemove event
       * @param {object} e MouseMove event
       */
      function handleMouseMove(e) {
        if (enabled) {
          if (pushed) {
            if (!axis || axis === 'x') {
              $element[0].scrollLeft -= (-lastClientX + (lastClientX = e.clientX));
            }
            if (!axis || axis === 'y') {
              $element[0].scrollTop -= (-lastClientY + (lastClientY = e.clientY));
            }
          }

          e.preventDefault();
        }
      }

      /**
       * Destroys all the event listeners
       */
      function destroy() {
        $element.off('mousedown', handleMouseDown);
        angular.element($window).off('mouseup', handleMouseUp);
        angular.element($window).off('mousemove', handleMouseMove);
      }

      /**
       * Selects text for a specific element
       * @param {object} element Selected element
       */
      function selectText(element) {
        var range;
        if ($window.document.selection) {
          range = $window.document.body.createTextRange();
          range.moveToElementText(element);
          range.select();
        } else if ($window.getSelection) {
          range = $window.document.createRange();
          range.selectNode(element);
          $window.getSelection().addRange(range);
        }
      }

      /**
       * Clears text selection
       */
      function clearSelection() {
        if ($window.getSelection) {
          if ($window.getSelection().empty) { // Chrome
            $window.getSelection().empty();
          } else if ($window.getSelection().removeAllRanges) { // Firefox
            $window.getSelection().removeAllRanges();
          }
        } else if ($document.selection) { // IE?
          $document.selection.empty();
        }
      }
    }
  };
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sp_angular_provider&lt;/sys_class_name&gt;&lt;sys_created_by&gt;douglas.schamberg&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-04-08 08:22:31&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;e17042291b0cdc1048a242e58d4bcb74&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;dragScrollRatelock&lt;/sys_name&gt;&lt;sys_package display_value="Ratelock" source="x_momo_ratelock"&gt;605affb71badc01048a242e58d4bcb76&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="Ratelock"&gt;605affb71badc01048a242e58d4bcb76&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_angular_provider_e17042291b0cdc1048a242e58d4bcb74&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;douglas.schamberg&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-04-08 08:22:31&lt;/sys_updated_on&gt;&lt;type&gt;directive&lt;/type&gt;&lt;/sp_angular_provider&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1524900234</payload_hash>
        <record_name>dragScrollRatelock</record_name>
        <reverted_from/>
        <source>74fc5f651b5a401048a242e58d4bcbbc</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>douglas.schamberg</sys_created_by>
        <sys_created_on>2020-04-08 08:22:31</sys_created_on>
        <sys_id>38a0c2291b0cdc1048a242e58d4bcb30</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>17158e231930000001</sys_recorded_at>
        <sys_updated_by>douglas.schamberg</sys_updated_by>
        <sys_updated_on>2020-04-08 08:22:31</sys_updated_on>
        <type>Widget Angular Provider</type>
        <update_guid>30a0c229540cdc1000a9fdee1818b030</update_guid>
        <update_guid_history>30a0c229540cdc1000a9fdee1818b030:-1524900234</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="">a9697c6fdb90d450f255132968961909</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>douglas.schamberg</sys_created_by>
        <sys_created_on>2020-04-26 18:34:50</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_db_object display_value="" name="sp_angular_provider">sp_angular_provider</sys_db_object>
        <sys_id>02dd5e2a202041c2808eb95c7e4ab2a4</sys_id>
        <sys_metadata>e17042291b0cdc1048a242e58d4bcb74</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>dragScrollRatelock</sys_name>
        <sys_package display_value="Ratelock" source="x_momo_ratelock">605affb71badc01048a242e58d4bcb76</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Ratelock">605affb71badc01048a242e58d4bcb76</sys_scope>
        <sys_scope_delete display_value="">57712118eaee4a49ae47b2048a14ac31</sys_scope_delete>
        <sys_update_name>sp_angular_provider_e17042291b0cdc1048a242e58d4bcb74</sys_update_name>
        <sys_update_version display_value="sp_angular_provider_e17042291b0cdc1048a242e58d4bcb74">38a0c2291b0cdc1048a242e58d4bcb30</sys_update_version>
        <sys_updated_by>douglas.schamberg</sys_updated_by>
        <sys_updated_on>2020-04-26 18:34:50</sys_updated_on>
    </sys_metadata_delete>
</record_update>
