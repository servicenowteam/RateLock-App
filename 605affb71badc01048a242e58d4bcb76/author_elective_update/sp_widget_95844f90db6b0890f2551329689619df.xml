<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="DELETE">
        <category>custom</category>
        <client_script><![CDATA[function attachMate($scope, nowAttachmentHandler, $rootScope, spUtil, spModal, $log, spAriaUtil, $document) {
  $scope.errorMessages = [];
  $scope.attachmentHandler = new nowAttachmentHandler(setAttachments, appendError);
  $scope.data.action = "";
  if ($scope.data.sys_ids.length > 0) {
    spUtil.recordWatch($scope, "sys_attachment", "sys_created_onONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()^table_name=" + $scope.data.table, function (response, data) {
      $scope.attachmentHandler.getAttachmentList();

      if (response.data) {
        var options = {};
        options.operation = response.data.operation;
        options.filename = response.data.display_value;
        options.sys_id = $scope.data.sys_id;
        options.table = $scope.data.table;
        options.state = (response.data.record && response.data.record.state) ? response.data.record.state.value : "";
        //broadcast only if operation is update...we don't need insert and other record updates for now
        if (options.operation === "update" && options.state === "not_available")
          $rootScope.$broadcast("attachment.updated", options);
      }
    });
  }


  $scope.$evalAsync(function () {
    $scope.data.sys_ids.forEach(function (id) {
      $scope.attachmentHandler.setParams($scope.data.table, id, 1024 * 1024 * $scope.data.maxAttachmentSize);
      $scope.attachmentHandler.getAttachmentList();
    });
  });

  $scope.hasAttachments = function () {
    return $scope.attachments && $scope.attachments.length != 0;
  };

  $scope.canWrite = function () {
    return false;
  };

  $scope.confirmDeleteAttachment = function (attachment) {
    var appendTo = $scope.data.appendToId ? $document.find('#' + $scope.data.appendToId) : null;
    spModal.confirm("${Delete Attachment?}", appendTo).then(function () {
      $scope.attachmentHandler.deleteAttachment(attachment);
    });
  };

  $scope.$on('dialog.upload_too_large.show', function (e) {
    $log.error($scope.data.largeAttachmentMsg);
    spUtil.addErrorMessage($scope.data.largeAttachmentMsg);
  });

  $scope.$on('added_attachment', function (evt) {
    $scope.data.action = "added";
    spUtil.update($scope);
  });

  $scope.$on('sn.attachment.scanned', function (evt) {
    $scope.attachmentHandler.getAttachmentList("list");
  });

  $scope.$on('sp.record.can_write', function (evt, answer) {
    $scope.data.canWrite = false;
  });

  function appendError(error) {
    $scope.errorMessages.push(error);
    spUtil.addErrorMessage(error.msg + error.fileName);
  }

  function setAttachments(attachments, action) {
    if ($scope.submitting == true)
      return;
    if ($scope.attachments) {
      $scope.attachments = $scope.attachments.concat(attachments.filter(function(file) {
        return (file.ext !== 'png' && file.ext !== 'webp' && file.ext !== 'jpg' && file.ext != 'jpeg')
      }));
    } else {
      $scope.attachments = attachments.filter(function(file) {
        return (file.ext !== 'png' && file.ext !== 'webp' && file.ext !== 'jpg' && file.ext != 'jpeg')
      });
    }
		console.log($scope.attachments);
    
    if (!action)
      return;

    if (action === "added") {
      spAriaUtil.sendLiveMessage($scope.data.attachmentSuccessMsg);
    }

    $scope.data.action = action;
    spUtil.update($scope);
  }
}]]></client_script>
        <controller_as>c</controller_as>
        <css>div.tools.align-right {
	display: none !important;
}
.list-group-item:first-child {
	border-top-right-radius: 0px;
  border-top-left-radius: 0px;
  border-top: none;
}

.list-group-item {
	border-right: none;
  border-left: none;
  border-bottom: none;
}

.sp-drop-area {
  display: block;
  padding: 30px;
  width: 100%;
  border: 1px dashed $panel-default-border;
}

::-webkit-scrollbar {
  width: 0.1em;
}
 
::-webkit-scrollbar-track {
  box-shadow: inset 0 0 0.5px rgba(0, 0, 0, 0.1);
}
 
::-webkit-scrollbar-thumb {
  background-color: $brand-primary;
  border-radius: 0.1em;
  outline: 0.5px solid #eee;
}

.panel {
	border: none;
}

.panel-heading.pad-14 {
	border-bottom: 1px solid #ccc;
}

.panel-scroll {
	overflow-x: hidden !important;
  overflow-y: auto !important;
  max-height: 215px;
}

@media screen and (max-width: 1000px) {
  .panel.panel-primary {
  	display: none;
    visibility: hidden;
  }
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id/>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Ratesheets List</name>
        <option_schema>[{"hint":"ID of referenced record","name":"record_id","section":"Data","label":"Record ID","type":"string"},{"hint":"Table name of referenced record","name":"record_table","section":"Data","label":"Record Table","type":"string"}]</option_schema>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
  data.table = 'x_momo_ratelock_ratesheet';
  data.appendToId = options.appendToId;
  data.table = _getActualTable(data.table);
  data.sys_ids = [];
  data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
  if (isNaN(data.maxAttachmentSize))
    data.maxAttachmentSize = 24;
  data.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "" + data.maxAttachmentSize + "MB");
  data.attachmentSuccessMsg = gs.getMessage("Attachment successfully uploaded");

  if (!data.table)
    return;

  var gr = new GlideRecord(data.table);
  gr.addEncodedQuery('sys_created_onONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()');
  gr.query();
  if (!gr.isValid())
    return;

  if (!gr.next())
    return;
  while (gr.next()) {
    data.sys_ids.push(gr.getUniqueValue());
  }

  data.canWrite = gr.canWrite();
  data.canAttach = gs.hasRole(gs.getProperty("glide.attachment.role"));
  data.canRead = gr.canRead();

  function _getActualTable(table) {
    if (!table)
      return table;

    var rec = new GlideRecord(table);
    if (!rec.isValid())
      return table;

    if (rec.getValue('sys_class_name')) {
      return rec.getValue('sys_class_name');
    }
    return table;
  }
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>douglas.schamberg</sys_created_by>
        <sys_created_on>2020-03-10 19:35:18</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>95844f90db6b0890f2551329689619df</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Ratesheets List</sys_name>
        <sys_package display_value="Ratelock" source="x_momo_ratelock">605affb71badc01048a242e58d4bcb76</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Ratelock">605affb71badc01048a242e58d4bcb76</sys_scope>
        <sys_update_name>sp_widget_95844f90db6b0890f2551329689619df</sys_update_name>
        <sys_updated_by>douglas.schamberg</sys_updated_by>
        <sys_updated_on>2020-03-10 19:35:18</sys_updated_on>
        <template><![CDATA[<div class="panel panel-primary">
  <div class="panel-heading">
    <div class="sp-attachments-header panel-title pull-left">
      ${Today's Ratesheets}
    </div>
    <div class="clearfix"></div>
  </div>

  <div class="sp-attachments panel-scroll">
    <div class="sp-no-attachments text-center text-muted padder-b padder-t" ng-show="!hasAttachments()">
      <em>${There are no ratesheets currently available}</em>
    </div>
    <now-attachments-list template="sp_attachment" />
  </div>
</div>
]]></template>
    </sp_widget>
    <sys_update_version action="INSERT_OR_UPDATE">
        <action>DELETE</action>
        <application display_value="Ratelock">605affb71badc01048a242e58d4bcb76</application>
        <file_path/>
        <instance_id>94e8281edbb7470060a6f0e5bf9619f6</instance_id>
        <instance_name>movementdev</instance_name>
        <name>sp_widget_95844f90db6b0890f2551329689619df</name>
        <payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sp_widget"&gt;&lt;sp_widget action="INSERT_OR_UPDATE"&gt;&lt;category&gt;custom&lt;/category&gt;&lt;client_script&gt;&lt;![CDATA[function attachMate($scope, nowAttachmentHandler, $rootScope, spUtil, spModal, $log, spAriaUtil, $document) {
  $scope.errorMessages = [];
  $scope.attachmentHandler = new nowAttachmentHandler(setAttachments, appendError);
  $scope.data.action = "";
  if ($scope.data.sys_ids.length &gt; 0) {
    spUtil.recordWatch($scope, "sys_attachment", "sys_created_onONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()^table_name=" + $scope.data.table, function (response, data) {
      $scope.attachmentHandler.getAttachmentList();

      if (response.data) {
        var options = {};
        options.operation = response.data.operation;
        options.filename = response.data.display_value;
        options.sys_id = $scope.data.sys_id;
        options.table = $scope.data.table;
        options.state = (response.data.record &amp;&amp; response.data.record.state) ? response.data.record.state.value : "";
        //broadcast only if operation is update...we don't need insert and other record updates for now
        if (options.operation === "update" &amp;&amp; options.state === "not_available")
          $rootScope.$broadcast("attachment.updated", options);
      }
    });
  }


  $scope.$evalAsync(function () {
    $scope.data.sys_ids.forEach(function (id) {
      $scope.attachmentHandler.setParams($scope.data.table, id, 1024 * 1024 * $scope.data.maxAttachmentSize);
      $scope.attachmentHandler.getAttachmentList();
    });
  });

  $scope.hasAttachments = function () {
    return $scope.attachments &amp;&amp; $scope.attachments.length != 0;
  };

  $scope.canWrite = function () {
    return false;
  };

  $scope.confirmDeleteAttachment = function (attachment) {
    var appendTo = $scope.data.appendToId ? $document.find('#' + $scope.data.appendToId) : null;
    spModal.confirm("${Delete Attachment?}", appendTo).then(function () {
      $scope.attachmentHandler.deleteAttachment(attachment);
    });
  };

  $scope.$on('dialog.upload_too_large.show', function (e) {
    $log.error($scope.data.largeAttachmentMsg);
    spUtil.addErrorMessage($scope.data.largeAttachmentMsg);
  });

  $scope.$on('added_attachment', function (evt) {
    $scope.data.action = "added";
    spUtil.update($scope);
  });

  $scope.$on('sn.attachment.scanned', function (evt) {
    $scope.attachmentHandler.getAttachmentList("list");
  });

  $scope.$on('sp.record.can_write', function (evt, answer) {
    $scope.data.canWrite = false;
  });

  function appendError(error) {
    $scope.errorMessages.push(error);
    spUtil.addErrorMessage(error.msg + error.fileName);
  }

  function setAttachments(attachments, action) {
    if ($scope.submitting == true)
      return;
    if ($scope.attachments) {
      $scope.attachments = $scope.attachments.concat(attachments.filter(function(file) {
        return (file.ext !== 'png' &amp;&amp; file.ext !== 'webp' &amp;&amp; file.ext !== 'jpg' &amp;&amp; file.ext != 'jpeg')
      }));
    } else {
      $scope.attachments = attachments.filter(function(file) {
        return (file.ext !== 'png' &amp;&amp; file.ext !== 'webp' &amp;&amp; file.ext !== 'jpg' &amp;&amp; file.ext != 'jpeg')
      });
    }
		console.log($scope.attachments);
    
    if (!action)
      return;

    if (action === "added") {
      spAriaUtil.sendLiveMessage($scope.data.attachmentSuccessMsg);
    }

    $scope.data.action = action;
    spUtil.update($scope);
  }
}]]&gt;&lt;/client_script&gt;&lt;controller_as&gt;c&lt;/controller_as&gt;&lt;css&gt;div.tools.align-right {
	display: none !important;
}
.list-group-item:first-child {
	border-top-right-radius: 0px;
  border-top-left-radius: 0px;
  border-top: none;
}

.list-group-item {
	border-right: none;
  border-left: none;
  border-bottom: none;
}

.sp-drop-area {
  display: block;
  padding: 30px;
  width: 100%;
  border: 1px dashed $panel-default-border;
}

::-webkit-scrollbar {
  width: 0.1em;
}
 
::-webkit-scrollbar-track {
  box-shadow: inset 0 0 0.5px rgba(0, 0, 0, 0.1);
}
 
::-webkit-scrollbar-thumb {
  background-color: $brand-primary;
  border-radius: 0.1em;
  outline: 0.5px solid #eee;
}

.panel {
	border: none;
}

.panel-heading.pad-14 {
	border-bottom: 1px solid #ccc;
}

.panel-scroll {
	overflow-x: hidden !important;
  overflow-y: auto !important;
  max-height: 215px;
}

@media screen and (max-width: 1000px) {
  .panel.panel-primary {
  	display: none;
    visibility: hidden;
  }
}&lt;/css&gt;&lt;data_table&gt;sp_instance&lt;/data_table&gt;&lt;demo_data/&gt;&lt;description/&gt;&lt;docs/&gt;&lt;field_list/&gt;&lt;has_preview&gt;false&lt;/has_preview&gt;&lt;id/&gt;&lt;internal&gt;false&lt;/internal&gt;&lt;link&gt;&lt;![CDATA[function link(scope, element, attrs, controller) {  }]]&gt;&lt;/link&gt;&lt;name&gt;Ratesheets List&lt;/name&gt;&lt;option_schema&gt;[{"hint":"ID of referenced record","name":"record_id","section":"Data","label":"Record ID","type":"string"},{"hint":"Table name of referenced record","name":"record_table","section":"Data","label":"Record Table","type":"string"}]&lt;/option_schema&gt;&lt;public&gt;false&lt;/public&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[(function() {
  data.table = 'x_momo_ratelock_ratesheet';
  data.appendToId = options.appendToId;
  data.table = _getActualTable(data.table);
  data.sys_ids = [];
  data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
  if (isNaN(data.maxAttachmentSize))
    data.maxAttachmentSize = 24;
  data.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "" + data.maxAttachmentSize + "MB");
  data.attachmentSuccessMsg = gs.getMessage("Attachment successfully uploaded");

  if (!data.table)
    return;

  var gr = new GlideRecord(data.table);
  gr.addEncodedQuery('sys_created_onONToday@javascript:gs.beginningOfToday()@javascript:gs.endOfToday()');
  gr.query();
  if (!gr.isValid())
    return;

  if (!gr.next())
    return;
  while (gr.next()) {
    data.sys_ids.push(gr.getUniqueValue());
  }

  data.canWrite = gr.canWrite();
  data.canAttach = gs.hasRole(gs.getProperty("glide.attachment.role"));
  data.canRead = gr.canRead();

  function _getActualTable(table) {
    if (!table)
      return table;

    var rec = new GlideRecord(table);
    if (!rec.isValid())
      return table;

    if (rec.getValue('sys_class_name')) {
      return rec.getValue('sys_class_name');
    }
    return table;
  }
})();]]&gt;&lt;/script&gt;&lt;servicenow&gt;false&lt;/servicenow&gt;&lt;sys_class_name&gt;sp_widget&lt;/sys_class_name&gt;&lt;sys_created_by&gt;douglas.schamberg&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2020-03-10 19:35:18&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;false&lt;/sys_customer_update&gt;&lt;sys_id&gt;95844f90db6b0890f2551329689619df&lt;/sys_id&gt;&lt;sys_mod_count&gt;0&lt;/sys_mod_count&gt;&lt;sys_name&gt;Ratesheets List&lt;/sys_name&gt;&lt;sys_package display_value="Ratelock" source="x_momo_ratelock"&gt;605affb71badc01048a242e58d4bcb76&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="Ratelock"&gt;605affb71badc01048a242e58d4bcb76&lt;/sys_scope&gt;&lt;sys_update_name&gt;sp_widget_95844f90db6b0890f2551329689619df&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;douglas.schamberg&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2020-03-10 19:35:18&lt;/sys_updated_on&gt;&lt;template&gt;&lt;![CDATA[&lt;div class="panel panel-primary"&gt;
  &lt;div class="panel-heading"&gt;
    &lt;div class="sp-attachments-header panel-title pull-left"&gt;
      ${Today's Ratesheets}
    &lt;/div&gt;
    &lt;div class="clearfix"&gt;&lt;/div&gt;
  &lt;/div&gt;

  &lt;div class="sp-attachments panel-scroll"&gt;
    &lt;div class="sp-no-attachments text-center text-muted padder-b padder-t" ng-show="!hasAttachments()"&gt;
      &lt;em&gt;${There are no ratesheets currently available}&lt;/em&gt;
    &lt;/div&gt;
    &lt;now-attachments-list template="sp_attachment" /&gt;
  &lt;/div&gt;
&lt;/div&gt;
]]&gt;&lt;/template&gt;&lt;/sp_widget&gt;&lt;/record_update&gt;</payload>
        <payload_hash>-1273238968</payload_hash>
        <record_name>Ratesheets List</record_name>
        <reverted_from/>
        <source>74fc5f651b5a401048a242e58d4bcbbc</source>
        <source_table>sys_update_set</source_table>
        <state>previous</state>
        <sys_created_by>douglas.schamberg</sys_created_by>
        <sys_created_on>2020-03-10 19:35:18</sys_created_on>
        <sys_id>59848f90db6b0890f2551329689619b4</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_recorded_at>170c5f1ba6c0000001</sys_recorded_at>
        <sys_updated_by>douglas.schamberg</sys_updated_by>
        <sys_updated_on>2020-03-10 19:35:18</sys_updated_on>
        <type>Widget</type>
        <update_guid>51848f903b6b0890db73e49c12e0ccb4</update_guid>
        <update_guid_history>51848f903b6b0890db73e49c12e0ccb4:-1273238968</update_guid_history>
    </sys_update_version>
    <sys_metadata_delete action="INSERT_OR_UPDATE">
        <sys_audit_delete display_value="">41e48fd0db6b0890f255132968961918</sys_audit_delete>
        <sys_class_name>sys_metadata_delete</sys_class_name>
        <sys_created_by>douglas.schamberg</sys_created_by>
        <sys_created_on>2020-03-10 19:36:56</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_db_object display_value="" name="sp_widget">sp_widget</sys_db_object>
        <sys_id>0c4cf30fa6a142588150d8f2fa4d0440</sys_id>
        <sys_metadata>95844f90db6b0890f2551329689619df</sys_metadata>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>Ratesheets List</sys_name>
        <sys_package display_value="Ratelock" source="x_momo_ratelock">605affb71badc01048a242e58d4bcb76</sys_package>
        <sys_parent/>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Ratelock">605affb71badc01048a242e58d4bcb76</sys_scope>
        <sys_scope_delete display_value="">57712118eaee4a49ae47b2048a14ac31</sys_scope_delete>
        <sys_update_name>sp_widget_95844f90db6b0890f2551329689619df</sys_update_name>
        <sys_update_version display_value="sp_widget_95844f90db6b0890f2551329689619df">59848f90db6b0890f2551329689619b4</sys_update_version>
        <sys_updated_by>douglas.schamberg</sys_updated_by>
        <sys_updated_on>2020-03-10 19:36:56</sys_updated_on>
    </sys_metadata_delete>
</record_update>
